version: '3.8' # 삭제해도 무방

volumes:
  honeytoken_db_data:

services:
  db_init:
    build:
      context: .
      dockerfile: Dockerfile
    command: python db_utils.py
    volumes:
      - honeytoken_db_data:/app/db_data
    environment:
      - DB_PATH=/app/db_data/honey_tokens_multi.db

  auth_server:
    build:
      context: .
      dockerfile: Dockerfile
    command: python auth_server.py
    ports: # 포트 매핑 추가
      - "${AUTH_SERVER_PORT:-5001}:5001" # 호스트 포트:컨테이너 포트
    volumes:
      - honeytoken_db_data:/app/db_data
    environment:
      - PYTHONUNBUFFERED=1
      - JWT_SECRET=my-super-secure-jwt-secret-for-docker-bridge
      - ACCESS_TOKEN_LIFESPAN_SECONDS=30
      - DB_PATH=/app/db_data/honey_tokens_multi.db
      - AUTH_SERVER_PORT=5001 # 컨테이너 내부에서 사용할 포트
      - RESOURCE_SERVER_HOST=resource_server # Docker 서비스 이름
      - RESOURCE_SERVER_PORT=5002
    depends_on:
      - db_init

  resource_server:
    build:
      context: .
      dockerfile: Dockerfile
    command: python resource_server.py
    ports: # 포트 매핑 추가
      - "${RESOURCE_SERVER_PORT:-5002}:5002"
    volumes:
      - honeytoken_db_data:/app/db_data
    environment:
      - PYTHONUNBUFFERED=1
      - JWT_SECRET=my-super-secure-jwt-secret-for-docker-bridge # auth_server와 동일
      - DB_PATH=/app/db_data/honey_tokens_multi.db
      - RESOURCE_SERVER_PORT=5002 # 컨테이너 내부에서 사용할 포트
    depends_on:
      - db_init

  client_web_app:
    build:
      context: .
      dockerfile: Dockerfile
    command: python client_web_app.py
    ports: # 포트 매핑 추가
      - "${CLIENT_WEB_APP_PORT:-5003}:5003"
    environment:
      - PYTHONUNBUFFERED=1
      - AUTH_SERVER_HOST=auth_server # Docker 서비스 이름
      - AUTH_SERVER_PORT=5001
      - RESOURCE_SERVER_HOST=resource_server # Docker 서비스 이름
      - RESOURCE_SERVER_PORT=5002
      - CLIENT_WEB_APP_PORT=5003 # 컨테이너 내부에서 사용할 포트
      - ACCESS_TOKEN_LIFESPAN_SECONDS=30
    depends_on:
      auth_server:
        condition: service_started
      resource_server:
        condition: service_started